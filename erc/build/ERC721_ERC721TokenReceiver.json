{
    "functions": [
        {
            "def": "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4)",
            "raw_rules": "    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n",
            "format": {
                "name": "onERC721Received",
                "arg_types": [
                    {
                        "name": "_operator",
                        "type": "address"
                    },
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    },
                    {
                        "name": "_data",
                        "type": "bytes"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "bytes4"
                }
            },
            "extracted": {
                "throw": [
                    {
                        "if": "Return of other than the magic value",
                        "throw": true
                    }
                ],
                "semantic_return": "The return value of the function `onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data)` in the context of an ERC721 smart contract is a specific constant, `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. This constant serves as a \"magic value\" that is used to confirm that the contract receiving the NFT (non-fungible token) is equipped to handle ERC721 tokens correctly.\n\nWhen an ERC721 token is transferred to a contract, the ERC721 smart contract will call this `onERC721Received` function on the recipient contract. The purpose of this call is to ensure that the recipient contract can properly receive and manage the NFT. If the recipient contract returns the exact bytes4 value calculated from the hash of the string \"onERC721Received(address,address,uint256,bytes)\", it indicates that the contract is designed to handle the receipt of ERC721 tokens according to the standard's requirements.\n\nIf the function returns any value other than this specific bytes4 value, the transaction is automatically reverted, meaning the transfer of the NFT is cancelled and no changes are made to the ownership of the token. This mechanism prevents tokens from being accidentally sent to contracts that cannot handle them, which could result in the tokens being lost.\n\nIn summary, the return value acts as a confirmation or acknowledgment that the recipient contract adheres to the ERC721 standard for receiving NFTs, thereby ensuring safe and expected behavior when NFTs are transferred to contracts.",
                "return": [
                    {
                        "ret_value": "0x150b7a02",
                        "if": "Return of other than the magic value MUST result in the transaction being reverted"
                    }
                ],
                "emit": [],
                "assign": [],
                "call": [
                    {
                        "call": "onERC721Received",
                        "if": "after a `transfer`",
                        "arg_rules": [
                            {
                                "arg": 0,
                                "rule": "_operator MUST be sent unaltered in call to the onERC721Received"
                            },
                            {
                                "arg": 1,
                                "rule": "_from MUST be sent unaltered in call to the onERC721Received"
                            },
                            {
                                "arg": 2,
                                "rule": "_tokenId MUST be sent unaltered in call to the onERC721Received"
                            },
                            {
                                "arg": 3,
                                "rule": "_data MUST be sent unaltered in call to the onERC721Received"
                            }
                        ]
                    }
                ],
                "order": []
            },
            "extract_debug": {
                "throw": "```json\n[\n    {\n        \"if\": \"Return of other than the magic value\",\n        \"throw\": true\n    }\n]\n```",
                "semantic_return": "The return value of the function `onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data)` in the context of an ERC721 smart contract is a specific constant, `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. This constant serves as a \"magic value\" that is used to confirm that the contract receiving the NFT (non-fungible token) is equipped to handle ERC721 tokens correctly.\n\nWhen an ERC721 token is transferred to a contract, the ERC721 smart contract will call this `onERC721Received` function on the recipient contract. The purpose of this call is to ensure that the recipient contract can properly receive and manage the NFT. If the recipient contract returns the exact bytes4 value calculated from the hash of the string \"onERC721Received(address,address,uint256,bytes)\", it indicates that the contract is designed to handle the receipt of ERC721 tokens according to the standard's requirements.\n\nIf the function returns any value other than this specific bytes4 value, the transaction is automatically reverted, meaning the transfer of the NFT is cancelled and no changes are made to the ownership of the token. This mechanism prevents tokens from being accidentally sent to contracts that cannot handle them, which could result in the tokens being lost.\n\nIn summary, the return value acts as a confirmation or acknowledgment that the recipient contract adheres to the ERC721 standard for receiving NFTs, thereby ensuring safe and expected behavior when NFTs are transferred to contracts.",
                "return": "```json\n[\n    {\n        \"ret_value\": \"0x150b7a02\",\n        \"if\": \"Return of other than the magic value MUST result in the transaction being reverted\"\n    }\n]\n```",
                "emit": "The provided function documentation and signature for `onERC721Received` in the ERC721 token standard does not explicitly mention the emission of any specific events within the function itself. The function is primarily concerned with handling the receipt of an NFT and ensuring that the transfer adheres to certain conditions, notably returning a specific magic value or throwing an error to revert the transaction if the conditions are not met.\n\nGiven the absence of explicit event emission details in the provided documentation, we can conclude that there are no events directly triggered by this function based on the standard documentation provided. Therefore, the JSON array indicating conditions for event emissions would be empty:\n\n```json\n[]\n```\n\nThis output reflects that the function does not specify any conditions under which events are emitted, as per the provided documentation snippet.",
                "assign": "[]",
                "call": "```json\n[\n    {\n        \"call\": \"onERC721Received\",\n        \"if\": \"after a `transfer`\",\n        \"arg_rules\": [\n            {\n                \"arg\": 0,\n                \"rule\": \"_operator MUST be sent unaltered in call to the onERC721Received\"\n            },\n            {\n                \"arg\": 1,\n                \"rule\": \"_from MUST be sent unaltered in call to the onERC721Received\"\n            },\n            {\n                \"arg\": 2,\n                \"rule\": \"_tokenId MUST be sent unaltered in call to the onERC721Received\"\n            },\n            {\n                \"arg\": 3,\n                \"rule\": \"_data MUST be sent unaltered in call to the onERC721Received\"\n            }\n        ]\n    }\n]\n```",
                "order": "The provided function description for `onERC721Received` does not specify any explicit order requirements related to the sequence of actions or events based on the parameters. The description primarily outlines the purpose and behavior of the function when an NFT is transferred, including potential rejections of the transfer and the expected return value. There is no mention of any parameter that dictates the order of operations or events.\n\nTherefore, the JSON array indicating conditions that need to be in order would be empty, as follows:\n\n```json\n[]\n```\n\nThis indicates that there are no specific ordering rules based on the function parameters as per the given description."
            }
        }
    ],
    "events": [],
    "name": "ERC721TokenReceiver",
    "rules": [
        {
            "rule": "The return value of the function `onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data)` in the context of an ERC721 smart contract is a specific constant, `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. This constant serves as a \"magic value\" that is used to confirm that the contract receiving the NFT (non-fungible token) is equipped to handle ERC721 tokens correctly.\n\nWhen an ERC721 token is transferred to a contract, the ERC721 smart contract will call this `onERC721Received` function on the recipient contract. The purpose of this call is to ensure that the recipient contract can properly receive and manage the NFT. If the recipient contract returns the exact bytes4 value calculated from the hash of the string \"onERC721Received(address,address,uint256,bytes)\", it indicates that the contract is designed to handle the receipt of ERC721 tokens according to the standard's requirements.\n\nIf the function returns any value other than this specific bytes4 value, the transaction is automatically reverted, meaning the transfer of the NFT is cancelled and no changes are made to the ownership of the token. This mechanism prevents tokens from being accidentally sent to contracts that cannot handle them, which could result in the tokens being lost.\n\nIn summary, the return value acts as a confirmation or acknowledgment that the recipient contract adheres to the ERC721 standard for receiving NFTs, thereby ensuring safe and expected behavior when NFTs are transferred to contracts.",
            "type": "semantic_return",
            "interface": "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": " throw if Return of other than the magic value",
            "type": "throw",
            "interface": "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "return 0x150b7a02 if Return of other than the magic value MUST result in the transaction being reverted",
            "type": "return",
            "interface": "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "call onERC721Received if after a `transfer`",
            "type": "call",
            "interface": "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4)",
            "if": null
        }
    ]
}