2025-08-17 16:26:55 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function balanceOf(address _owner) external view returns (uint256)] checking rule=' throw if _owner is the zero address' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:26:55 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=balanceOf
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function ownerOf(uint256 _tokenId) external view returns (address)] checking rule=' throw if NFTs assigned to zero address' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=ownerOf
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if NFTs assigned to zero address' for function='function ownerOf(uint256 _tokenId) external view returns (address)': 'NoneType' object has no attribute 'type'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule=' throw if `msg.sender` is not the current owner, an authorized operator, or the approved address for this NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'LogicCondition', 'cond': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, {'type': 'MsgSenderSelector'}]}, 'right': {'type': 'ConstantSelector', 'value': True}, 'op': 'eq'}], 'op': 'or'}, 'op': 'not_throw'}'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `msg.sender` is not the current owner, an authorized operator, or the approved address for this NFT' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule=' throw if `_from` is not the current owner' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'not_eq'}, 'op': 'throw'}'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `_from` is not the current owner' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule=' throw if `_to` is the zero address' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:26:58 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:07 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule=' throw if `_tokenId` is not a valid NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:27:07 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:07 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `_tokenId` is not a valid NFT' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:27:07 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule=' throw if the return value of `onERC721Received` is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FnCallRetSelector', 'fn_name': 'onERC721Received'}, 'right': {'type': 'ConstantSelector', 'value': '0x150b7a02'}, 'op': 'not_eq'}, 'op': 'throw'}'
2025-08-17 16:27:07 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:18 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule='emit '['Transfer']' if `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT, `_from` is the current owner, `_to` is not the zero address, and `_tokenId` is a valid NFT' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'cond': {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'not_eq'}, {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'MsgSenderSelector'}]}, 'op': 'eq'}]}]}, 'type': 'EmitVerify'}'
2025-08-17 16:27:18 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:18 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule='emit '['Transfer']' if `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT, `_from` is the current owner, `_to` is not the zero address, and `_tokenId` is a valid NFT' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable': Unsupported condition type: {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'not_eq'}, {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'MsgSenderSelector'}]}, 'op': 'eq'}]}]}
2025-08-17 16:27:18 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule='emit '['Approval']' if the owner or an approved operator revokes approval for a token' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'type': 'EmitVerify'}'
2025-08-17 16:27:18 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:26 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable] checking rule='call onERC721Received if `_to` is a smart contract (code size > 0)' sym='{'callee': 'onERC721Received', 'on': {'index': 1, 'type': 'FuncParamSelector'}, 'cond': 'is_contract', 'type': 'CallVerify'}'
2025-08-17 16:27:26 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `msg.sender` is not the current owner, an authorized operator, or the approved address for this NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'LogicCondition', 'cond': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, {'type': 'MsgSenderSelector'}]}, 'op': 'not_eq'}], 'op': 'and'}, 'op': 'not_throw'}'
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `msg.sender` is not the current owner, an authorized operator, or the approved address for this NFT' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `_from` is not the current owner' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'right': {'type': 'FuncParamSelector', 'index': 0}, 'op': 'not_eq'}, 'op': 'throw'}'
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `_from` is not the current owner' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `_to` is the zero address' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:27:53 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:00 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `_tokenId` is not a valid NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:28:00 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:00 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `_tokenId` is not a valid NFT' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:00 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if the return value of `onERC721Received` is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FnCallRetSelector', 'fn_name': 'onERC721Received'}, 'right': {'type': 'ConstantSelector', 'value': '0x150b7a02'}, 'op': 'not_eq'}, 'op': 'throw'}'
2025-08-17 16:28:00 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:08 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule='emit '['Transfer']' if `_from` is the current owner, an authorized operator, or the approved address for this NFT, `_to` is not the zero address, `_tokenId` is a valid NFT' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'cond': {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'not_eq'}, {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'FuncParamSelector', 'index': 1}]}, 'op': 'eq'}]}]}, 'type': 'EmitVerify'}'
2025-08-17 16:28:08 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:08 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule='emit '['Transfer']' if `_from` is the current owner, an authorized operator, or the approved address for this NFT, `_to` is not the zero address, `_tokenId` is a valid NFT' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable': Unsupported condition type: {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'not_eq'}, {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 0}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'FuncParamSelector', 'index': 1}]}, 'op': 'eq'}]}]}
2025-08-17 16:28:08 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule='emit '['Approval']' if the approved address for this NFT is reset (commonly to address(0))' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'change_type': 'change'}, 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'type': 'EmitVerify'}'
2025-08-17 16:28:08 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:21 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule='emit '['ERC721Received']' if `_to` is a smart contract and `onERC721Received` is successfully called on `_to`' sym='{'type': 'EmitVerify', 'event': 'ERC721Received', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'cond': {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 'address(0)'}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 'true'}, 'op': 'eq'}]}, 'within_call_fn': 'onERC721Received'}'
2025-08-17 16:28:21 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:21 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule='emit '['ERC721Received']' if `_to` is a smart contract and `onERC721Received` is successfully called on `_to`' for function='function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable': Unsupported condition type: {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 'address(0)'}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 'true'}, 'op': 'eq'}]}
2025-08-17 16:28:21 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule='call onERC721Received if `_to` is a smart contract (code size > 0)' sym='{'callee': 'onERC721Received', 'on': {'index': 1, 'type': 'FuncParamSelector'}, 'cond': 'is_contract', 'type': 'CallVerify'}'
2025-08-17 16:28:21 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `msg.sender` is not the current owner, an authorized operator, or the approved address for this NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'LogicCondition', 'cond': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, {'type': 'MsgSenderSelector'}]}, 'op': 'not_eq'}], 'op': 'and'}, 'op': 'throw'}'
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `msg.sender` is not the current owner, an authorized operator, or the approved address for this NFT' for function='function transferFrom(address _from, address _to, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `_from` is not the current owner' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'right': {'type': 'FuncParamSelector', 'index': 0}, 'op': 'not_eq'}, 'op': 'throw'}'
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `_from` is not the current owner' for function='function transferFrom(address _from, address _to, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `_to` is the zero address' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:28:36 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule=' throw if `_tokenId` is not a valid NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `_tokenId` is not a valid NFT' for function='function transferFrom(address _from, address _to, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _tokenId) external payable] checking rule='emit '['Transfer']' if msg.sender is the current owner, an authorized operator, or the approved address for this NFT, `_from` is the current owner, `_to` is not the zero address, and `_tokenId` is a valid NFT' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'cond': {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'not_eq'}, {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'MsgSenderSelector'}]}, 'op': 'eq'}]}]}, 'type': 'EmitVerify'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule='emit '['Transfer']' if msg.sender is the current owner, an authorized operator, or the approved address for this NFT, `_from` is the current owner, `_to` is not the zero address, and `_tokenId` is a valid NFT' for function='function transferFrom(address _from, address _to, uint256 _tokenId) external payable': Unsupported condition type: {'type': 'LogicCondition', 'op': 'and', 'conds': [{'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'not_eq'}, {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'MsgSenderSelector'}]}, 'op': 'eq'}]}]}
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function approve(address _approved, uint256 _tokenId) external payable] checking rule=' throw if `msg.sender` is not the current NFT owner and not an authorized operator of the current owner' sym='{'type': 'ThrowVerify', 'cond': {'type': 'LogicCondition', 'cond': [{'type': 'CompCondition', 'left': {'type': 'MsgSenderSelector'}, 'right': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, 'op': 'not_eq'}, {'type': 'CompCondition', 'left': {'type': 'FnCallRetSelector', 'fn_name': 'isApprovedForAll', 'keys': [{'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, {'type': 'MsgSenderSelector'}]}, 'right': {'type': 'ConstantSelector', 'value': False}, 'op': 'eq'}], 'op': 'and'}, 'op': 'throw'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if `msg.sender` is not the current NFT owner and not an authorized operator of the current owner' for function='function approve(address _approved, uint256 _tokenId) external payable': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function setApprovalForAll(address _operator, bool _approved) external] checking rule='emit '['ApprovalForAll']' if always' sym='{'event': 'ApprovalForAll', 'type': 'EmitVerify'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:273 - ERROR - [sym] failed to deserialize sym='{'event': 'ApprovalForAll', 'type': 'EmitVerify'}': 'sv_cond'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function getApproved(uint256 _tokenId) external view returns (address)] checking rule=' throw if _tokenId is not a valid NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=getApproved
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if _tokenId is not a valid NFT' for function='function getApproved(uint256 _tokenId) external view returns (address)': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);] checking rule='emit 'Transfer'' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}}, 'type': 'EmitVerify'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=renounceOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=constructor
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintNFT
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setNewRound
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setVerificationHash
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setOnlyBeastListed
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setBaseURI
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setSaleStarted
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setURIManager
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setTeamReserveAddr
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintReserves
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintHoodReserve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);] checking rule='emit 'Transfer'' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, 'change_type': 'token_creation'}, 'arg_verifiers': [{'type': 'ArgVerify', 'arg_index': 0, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': '0'}}}], 'type': 'EmitVerify'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:273 - ERROR - [sym] failed to deserialize sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, 'change_type': 'token_creation'}, 'arg_verifiers': [{'type': 'ArgVerify', 'arg_index': 0, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': '0'}}}], 'type': 'EmitVerify'}': 'value'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);] checking rule='emit 'Transfer'' sym='{'type': 'EmitVerify', 'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}, 'change_type': 'token_burn'}, 'arg_verifiers': [{'type': 'ArgVerify', 'arg_index': 1, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': '0'}}}]}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:273 - ERROR - [sym] failed to deserialize sym='{'type': 'EmitVerify', 'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}, 'change_type': 'token_burn'}, 'arg_verifiers': [{'type': 'ArgVerify', 'arg_index': 1, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': '0'}}}]}': 'value'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);] checking rule='emit 'Transfer'' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'anchor_fn': 'ownerOf', 'type': 'StateVarSelector'}}, 'type': 'EmitVerify', 'within_call_fn': None}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=renounceOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=constructor
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintNFT
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setNewRound
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setVerificationHash
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setOnlyBeastListed
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setBaseURI
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setSaleStarted
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setURIManager
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setTeamReserveAddr
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintReserves
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintHoodReserve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function approve(address _approved, uint256 _tokenId) external payable] checking rule='emit '['Approval']' if `msg.sender` is the current NFT owner or an authorized operator of the current owner' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}}, 'cond': {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, 'right': {'type': 'ConstantSelector', 'value': 'msg.sender'}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, {'type': 'ConstantSelector', 'value': 'msg.sender'}]}, 'right': {'type': 'ConstantSelector', 'value': True}, 'op': 'eq'}]}, 'type': 'EmitVerify'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule='emit '['Approval']' if `msg.sender` is the current NFT owner or an authorized operator of the current owner' for function='function approve(address _approved, uint256 _tokenId) external payable': Unsupported condition type: {'type': 'LogicCondition', 'op': 'or', 'conds': [{'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, 'right': {'type': 'ConstantSelector', 'value': 'msg.sender'}, 'op': 'eq'}, {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll', 'keys': [{'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, {'type': 'ConstantSelector', 'value': 'msg.sender'}]}, 'right': {'type': 'ConstantSelector', 'value': True}, 'op': 'eq'}]}
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)] checking rule='the approved address for that NFT (if any) is reset to none' sym='{'type': 'StateAssignVerify', 'event': 'Transfer', 'state': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'EventParamSelector', 'index': 2}]}, 'value': {'type': 'NoneValueSelector'}, 'op': 'overwrite'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=renounceOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='renounceOwnership() returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='transferOwnership(address) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='approve(address,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setApprovalForAll(address,bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=constructor
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='constructor() returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setApprovalForAll(address,bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='approve(address,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setNewRound
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setNewRound(uint256,string,uint32,uint256,bool,bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setVerificationHash
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setVerificationHash(bytes32) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setOnlyBeastListed
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setOnlyBeastListed(bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setBaseURI
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setBaseURI(string) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setSaleStarted
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setSaleStarted(bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setURIManager
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setURIManager(address) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setTeamReserveAddr
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='the approved address for that NFT (if any) is reset to none' for function='setTeamReserveAddr(address) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);] checking rule='emit 'Approval'' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'EventParamSelector', 'index': 2}]}}, 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'EventParamSelector', 'index': 2}]}, 'right': {'type': 'EventParamSelector', 'index': 1}, 'op': 'not_eq'}, 'alternative_events': ['Transfer'], 'type': 'EmitVerify'}'
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=renounceOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='renounceOwnership() returns()': list index out of range
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferOwnership
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='transferOwnership(address) returns()': list index out of range
2025-08-17 16:28:44 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='approve(address,uint256) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setApprovalForAll(address,bool) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='transferFrom(address,address,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='safeTransferFrom(address,address,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='safeTransferFrom(address,address,uint256,bytes) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=constructor
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='constructor() returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setApprovalForAll(address,bool) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='approve(address,uint256) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='transferFrom(address,address,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='safeTransferFrom(address,address,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='safeTransferFrom(address,address,uint256,bytes) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintNFT
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='mintNFT(uint256,uint256,bytes32[]) returns()': b'parser error'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setNewRound
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setNewRound(uint256,string,uint32,uint256,bool,bool) returns()': sort mismatch
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setVerificationHash
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setVerificationHash(bytes32) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setOnlyBeastListed
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setOnlyBeastListed(bool) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setBaseURI
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setBaseURI(string) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setSaleStarted
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setSaleStarted(bool) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setURIManager
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setURIManager(address) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setTeamReserveAddr
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='setTeamReserveAddr(address) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintReserves
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintHoodReserve
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Approval'' for function='mintHoodReserve(uint256) returns()': list index out of range
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);] checking rule='emit 'Approval'' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'arg_verifiers': [{'type': 'ArgVerify', 'arg_index': 1, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': 'none'}, 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 'none'}, 'op': 'eq'}}}], 'type': 'EmitVerify'}'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:273 - ERROR - [sym] failed to deserialize sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'getApproved', 'keys': [{'type': 'FuncParamSelector', 'index': 2}]}}, 'arg_verifiers': [{'type': 'ArgVerify', 'arg_index': 1, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': 'none'}, 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 'none'}, 'op': 'eq'}}}], 'type': 'EmitVerify'}': 'value'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);] checking rule='emit 'ApprovalForAll'' sym='{'event': 'ApprovalForAll', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'isApprovedForAll'}}, 'type': 'EmitVerify'}'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=renounceOwnership
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferOwnership
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'ApprovalForAll'' for function='setApprovalForAll(address,bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=constructor
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setApprovalForAll
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'ApprovalForAll'' for function='setApprovalForAll(address,bool) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=approve
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=transferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=safeTransferFrom
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintNFT
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setNewRound
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setVerificationHash
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setOnlyBeastListed
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setBaseURI
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setSaleStarted
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setURIManager
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=setTeamReserveAddr
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintReserves
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=mintHoodReserve
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function tokenURI(uint256 _tokenId) external view returns (string)] checking rule=' throw if _tokenId is not a valid NFT' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'ownerOf', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}, 'right': {'type': 'ConstantSelector', 'value': '0x0000000000000000000000000000000000000000'}, 'op': 'eq'}, 'op': 'throw'}'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=AKCB function=tokenURI
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:304 - ERROR - [sym] failed to verify rule=' throw if _tokenId is not a valid NFT' for function='function tokenURI(uint256 _tokenId) external view returns (string)': 'NoneType' object has no attribute 'type'
2025-08-17 16:28:45 - /home/szx5097/code/solgpt/py/audit/process.py:108 - INFO - [+] eval/llmauditsliced/721_candidate_2.json
2025-08-17 19:14:40 - /home/szx5097/code/solgpt/py/audit/process.py:47 - INFO - Skipping benchmark/smallext/721_candidate_2.sol, already processed.
