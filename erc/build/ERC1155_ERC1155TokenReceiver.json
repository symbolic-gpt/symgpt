{
    "functions": [
        {
            "def": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "raw_rules": "    /**\n        @notice Handle the receipt of a single ERC1155 token type.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n        This function MUST revert if it rejects the transfer.\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _id        The ID of the token being transferred\n        @param _value     The amount of tokens being transferred\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    */\n",
            "format": {
                "name": "onERC1155Received",
                "arg_types": [
                    {
                        "name": "_operator",
                        "type": "address"
                    },
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_id",
                        "type": "uint256"
                    },
                    {
                        "name": "_value",
                        "type": "uint256"
                    },
                    {
                        "name": "_data",
                        "type": "bytes calldata"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "bytes4"
                }
            },
            "extracted": {
                "throw": [
                    {
                        "if": "the function does not return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`",
                        "throw": true
                    },
                    {
                        "if": "the function rejects the transfer",
                        "throw": true
                    },
                    {
                        "if": "any other value than `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` is returned",
                        "throw": true
                    }
                ],
                "semantic_return": "The return value `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`, which evaluates to `0xf23a6e61`, serves as a standardized confirmation signal indicating that the recipient contract has successfully accepted the transfer of an ERC1155 token. This specific return value is a requirement under the ERC1155 standard for a function that handles the receipt of ERC1155 tokens. When a smart contract that complies with ERC1155 standards sends a token to another contract, it must call this `onERC1155Received` function on the recipient contract. The recipient must then return this exact value to signify acceptance of the token(s).\n\nIf the recipient contract returns this specific value (`0xf23a6e61`), it confirms to the sender that the token transfer was accepted and processed correctly. If the function returns any other value, or if it fails to return this value, the original transaction that initiated the transfer must be reverted, meaning it should be cancelled and treated as if it never occurred. This mechanism ensures that tokens are not mistakenly transferred to contracts that do not recognize or cannot handle them properly, thereby preventing potential loss of tokens.",
                "return": [
                    {
                        "ret_value": "0xf23a6e61",
                        "if": "it accepts the transfer"
                    }
                ],
                "emit": [],
                "assign": [],
                "call": [
                    {
                        "call": "onERC1155Received",
                        "if": "at the end of a `safeTransferFrom` after the balance has been updated",
                        "arg_rules": [
                            {
                                "arg": 0,
                                "rule": "_operator MUST be sent unaltered in call to the onERC1155Received"
                            },
                            {
                                "arg": 1,
                                "rule": "_from MUST be sent unaltered in call to the onERC1155Received"
                            },
                            {
                                "arg": 2,
                                "rule": "_id MUST be sent unaltered in call to the onERC1155Received"
                            },
                            {
                                "arg": 3,
                                "rule": "_value MUST be sent unaltered in call to the onERC1155Received"
                            },
                            {
                                "arg": 4,
                                "rule": "_data MUST be sent unaltered in call to the onERC1155Received"
                            }
                        ]
                    }
                ],
                "order": []
            },
            "extract_debug": {
                "throw": "```json\n[\n    {\n        \"if\": \"the function does not return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\",\n        \"throw\": true\n    },\n    {\n        \"if\": \"the function rejects the transfer\",\n        \"throw\": true\n    },\n    {\n        \"if\": \"any other value than `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` is returned\",\n        \"throw\": true\n    }\n]\n```",
                "semantic_return": "The return value `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`, which evaluates to `0xf23a6e61`, serves as a standardized confirmation signal indicating that the recipient contract has successfully accepted the transfer of an ERC1155 token. This specific return value is a requirement under the ERC1155 standard for a function that handles the receipt of ERC1155 tokens. When a smart contract that complies with ERC1155 standards sends a token to another contract, it must call this `onERC1155Received` function on the recipient contract. The recipient must then return this exact value to signify acceptance of the token(s).\n\nIf the recipient contract returns this specific value (`0xf23a6e61`), it confirms to the sender that the token transfer was accepted and processed correctly. If the function returns any other value, or if it fails to return this value, the original transaction that initiated the transfer must be reverted, meaning it should be cancelled and treated as if it never occurred. This mechanism ensures that tokens are not mistakenly transferred to contracts that do not recognize or cannot handle them properly, thereby preventing potential loss of tokens.",
                "return": "```json\n[\n    {\n        \"ret_value\": \"0xf23a6e61\",\n        \"if\": \"it accepts the transfer\"\n    }\n]\n```",
                "emit": "The provided documentation for the `onERC1155Received` function does not explicitly mention the emission of any specific events based on conditions. The function primarily focuses on handling the receipt of ERC1155 tokens and specifies the conditions under which it should return a specific value or revert the transaction. However, it does not describe any event emissions directly tied to specific conditions within the function itself.\n\nGiven the absence of explicit event-related instructions in the provided rules, the JSON array reflecting conditions for event emissions would be empty, as shown below:\n\n```json\n[]\n```\n\nThis output indicates that there are no specified events that this function is required to emit based on the provided documentation.",
                "assign": "[]",
                "call": "```json\n[\n    {\n        \"call\": \"onERC1155Received\",\n        \"if\": \"at the end of a `safeTransferFrom` after the balance has been updated\",\n        \"arg_rules\": [\n            {\n                \"arg\": 0,\n                \"rule\": \"_operator MUST be sent unaltered in call to the onERC1155Received\"\n            },\n            {\n                \"arg\": 1,\n                \"rule\": \"_from MUST be sent unaltered in call to the onERC1155Received\"\n            },\n            {\n                \"arg\": 2,\n                \"rule\": \"_id MUST be sent unaltered in call to the onERC1155Received\"\n            },\n            {\n                \"arg\": 3,\n                \"rule\": \"_value MUST be sent unaltered in call to the onERC1155Received\"\n            },\n            {\n                \"arg\": 4,\n                \"rule\": \"_data MUST be sent unaltered in call to the onERC1155Received\"\n            }\n        ]\n    }\n]\n```",
                "order": "The description provided for the function `onERC1155Received` does not explicitly mention any conditions that need to be ordered based on an array parameter or any other sequence. The function's requirements are primarily about the conditions under which it should accept or reject a transfer, and the specific return value it must provide.\n\nGiven the nature of the function and its description, there are no order dependencies related to array parameters or sequences that fit the format you've specified. The function's behavior is contingent on the correctness of the return value and the state of the transaction, rather than an order of operations based on an array or list.\n\nTherefore, the JSON array reflecting the order conditions as per your request would be empty, as follows:\n\n```json\n[]\n```\n\nThis indicates that there are no specific \"order\" rules based on array parameters in the function `onERC1155Received`."
            }
        },
        {
            "def": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4)",
            "raw_rules": "\n    /**\n        @notice Handle the receipt of multiple ERC1155 token types.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n        This function MUST revert if it rejects the transfer(s).\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    */\n",
            "format": {
                "name": "onERC1155BatchReceived",
                "arg_types": [
                    {
                        "name": "_operator",
                        "type": "address"
                    },
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_ids",
                        "type": "uint256[] calldata"
                    },
                    {
                        "name": "_values",
                        "type": "uint256[] calldata"
                    },
                    {
                        "name": "_data",
                        "type": "bytes calldata"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "bytes4"
                }
            },
            "extracted": {
                "throw": [
                    {
                        "if": "the function does not accept the transfer(s)",
                        "throw": true
                    },
                    {
                        "if": "return value is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`",
                        "throw": true
                    }
                ],
                "semantic_return": "The return value `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` which evaluates to `0xbc197c81` in the context of the `onERC1155BatchReceived` function has a specific semantic meaning in the ERC1155 token standard. This value is a unique identifier that signifies the successful receipt and acceptance of a batch of ERC1155 tokens by a smart contract.\n\nWhen an ERC1155-compliant smart contract executes a `safeBatchTransferFrom` operation, which involves transferring multiple types of tokens to a recipient, it must call the `onERC1155BatchReceived` function on the recipient's contract after updating the token balances. The purpose of this call is to ensure that the recipient contract is capable of handling ERC1155 tokens properly, particularly when the recipient is a contract rather than an externally owned account (EOA).\n\nThe return value `0xbc197c81` serves as a confirmation from the recipient contract that it:\n1. Has implemented the `onERC1155BatchReceived` function correctly.\n2. Is prepared to handle or manage the batch of tokens it has just received.\n3. Explicitly consents to the transfer, indicating that the tokens will not be inadvertently locked or mishandled.\n\nIf the recipient contract returns this specific value, the token transfer process can safely conclude that the tokens have been transferred to a compatible recipient. Conversely, if the function reverts or returns any value other than `0xbc197c81`, the ERC1155 token standard mandates that the transaction must be reverted. This safeguard ensures that tokens are not transferred to contracts that do not recognize or cannot properly manage ERC1155 tokens, thus preventing potential loss or locking of tokens in incompatible contracts.",
                "return": [
                    {
                        "ret_value": "0xbc197c81",
                        "if": "it accepts the transfer(s)"
                    }
                ],
                "emit": [],
                "assign": [],
                "call": [
                    {
                        "call": "onERC1155BatchReceived",
                        "if": "at the end of a `safeBatchTransferFrom` after the balances have been updated",
                        "arg_rules": [
                            {
                                "arg": 0,
                                "rule": "_operator MUST be sent unaltered in call to the onERC1155BatchReceived"
                            },
                            {
                                "arg": 1,
                                "rule": "_from MUST be sent unaltered in call to the onERC1155BatchReceived"
                            },
                            {
                                "arg": 2,
                                "rule": "_ids MUST be sent unaltered in call to the onERC1155BatchReceived"
                            },
                            {
                                "arg": 3,
                                "rule": "_values MUST be sent unaltered in call to the onERC1155BatchReceived"
                            },
                            {
                                "arg": 4,
                                "rule": "_data MUST be sent unaltered in call to the onERC1155BatchReceived"
                            }
                        ]
                    }
                ],
                "order": [
                    {
                        "subject": "_ids array",
                        "order_by": "_values array"
                    },
                    {
                        "subject": "_values array",
                        "order_by": "_ids array"
                    }
                ]
            },
            "extract_debug": {
                "throw": "```json\n[\n    {\n        \"if\": \"the function does not accept the transfer(s)\",\n        \"throw\": true\n    },\n    {\n        \"if\": \"return value is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\",\n        \"throw\": true\n    }\n]\n```",
                "semantic_return": "The return value `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` which evaluates to `0xbc197c81` in the context of the `onERC1155BatchReceived` function has a specific semantic meaning in the ERC1155 token standard. This value is a unique identifier that signifies the successful receipt and acceptance of a batch of ERC1155 tokens by a smart contract.\n\nWhen an ERC1155-compliant smart contract executes a `safeBatchTransferFrom` operation, which involves transferring multiple types of tokens to a recipient, it must call the `onERC1155BatchReceived` function on the recipient's contract after updating the token balances. The purpose of this call is to ensure that the recipient contract is capable of handling ERC1155 tokens properly, particularly when the recipient is a contract rather than an externally owned account (EOA).\n\nThe return value `0xbc197c81` serves as a confirmation from the recipient contract that it:\n1. Has implemented the `onERC1155BatchReceived` function correctly.\n2. Is prepared to handle or manage the batch of tokens it has just received.\n3. Explicitly consents to the transfer, indicating that the tokens will not be inadvertently locked or mishandled.\n\nIf the recipient contract returns this specific value, the token transfer process can safely conclude that the tokens have been transferred to a compatible recipient. Conversely, if the function reverts or returns any value other than `0xbc197c81`, the ERC1155 token standard mandates that the transaction must be reverted. This safeguard ensures that tokens are not transferred to contracts that do not recognize or cannot properly manage ERC1155 tokens, thus preventing potential loss or locking of tokens in incompatible contracts.",
                "return": "```json\n[\n    {\n        \"ret_value\": \"0xbc197c81\",\n        \"if\": \"it accepts the transfer(s)\"\n    }\n]\n```",
                "emit": "Based on the provided function documentation and the rules for event emission, it appears that there are no explicit events mentioned to be emitted directly by the `onERC1155BatchReceived` function itself. The function documentation focuses on the requirements and expected behavior (such as returning a specific value or reverting under certain conditions) rather than specifying any events to be emitted.\n\nTherefore, the JSON array indicating conditions for event emission would be empty, as follows:\n\n```json\n[]\n```\n\nThis indicates that there are no specific events described to be emitted by this function under the given conditions in the provided documentation.",
                "assign": "[]",
                "call": "```json\n[\n    {\n        \"call\": \"onERC1155BatchReceived\",\n        \"if\": \"at the end of a `safeBatchTransferFrom` after the balances have been updated\",\n        \"arg_rules\": [\n            {\n                \"arg\": 0,\n                \"rule\": \"_operator MUST be sent unaltered in call to the onERC1155BatchReceived\"\n            },\n            {\n                \"arg\": 1,\n                \"rule\": \"_from MUST be sent unaltered in call to the onERC1155BatchReceived\"\n            },\n            {\n                \"arg\": 2,\n                \"rule\": \"_ids MUST be sent unaltered in call to the onERC1155BatchReceived\"\n            },\n            {\n                \"arg\": 3,\n                \"rule\": \"_values MUST be sent unaltered in call to the onERC1155BatchReceived\"\n            },\n            {\n                \"arg\": 4,\n                \"rule\": \"_data MUST be sent unaltered in call to the onERC1155BatchReceived\"\n            }\n        ]\n    }\n]\n```",
                "order": "```json\n[\n    {\n        \"subject\": \"_ids array\",\n        \"order_by\": \"_values array\"\n    },\n    {\n        \"subject\": \"_values array\",\n        \"order_by\": \"_ids array\"\n    }\n]\n```"
            }
        }
    ],
    "events": [],
    "name": "ERC1155TokenReceiver",
    "rules": [
        {
            "rule": "The return value `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`, which evaluates to `0xf23a6e61`, serves as a standardized confirmation signal indicating that the recipient contract has successfully accepted the transfer of an ERC1155 token. This specific return value is a requirement under the ERC1155 standard for a function that handles the receipt of ERC1155 tokens. When a smart contract that complies with ERC1155 standards sends a token to another contract, it must call this `onERC1155Received` function on the recipient contract. The recipient must then return this exact value to signify acceptance of the token(s).\n\nIf the recipient contract returns this specific value (`0xf23a6e61`), it confirms to the sender that the token transfer was accepted and processed correctly. If the function returns any other value, or if it fails to return this value, the original transaction that initiated the transfer must be reverted, meaning it should be cancelled and treated as if it never occurred. This mechanism ensures that tokens are not mistakenly transferred to contracts that do not recognize or cannot handle them properly, thereby preventing potential loss of tokens.",
            "type": "semantic_return",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": " throw if the function does not return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`",
            "type": "throw",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": " throw if the function rejects the transfer",
            "type": "throw",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": " throw if any other value than `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` is returned",
            "type": "throw",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "return 0xf23a6e61 if it accepts the transfer",
            "type": "return",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "call onERC1155Received if at the end of a `safeTransferFrom` after the balance has been updated",
            "type": "call",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "The return value `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` which evaluates to `0xbc197c81` in the context of the `onERC1155BatchReceived` function has a specific semantic meaning in the ERC1155 token standard. This value is a unique identifier that signifies the successful receipt and acceptance of a batch of ERC1155 tokens by a smart contract.\n\nWhen an ERC1155-compliant smart contract executes a `safeBatchTransferFrom` operation, which involves transferring multiple types of tokens to a recipient, it must call the `onERC1155BatchReceived` function on the recipient's contract after updating the token balances. The purpose of this call is to ensure that the recipient contract is capable of handling ERC1155 tokens properly, particularly when the recipient is a contract rather than an externally owned account (EOA).\n\nThe return value `0xbc197c81` serves as a confirmation from the recipient contract that it:\n1. Has implemented the `onERC1155BatchReceived` function correctly.\n2. Is prepared to handle or manage the batch of tokens it has just received.\n3. Explicitly consents to the transfer, indicating that the tokens will not be inadvertently locked or mishandled.\n\nIf the recipient contract returns this specific value, the token transfer process can safely conclude that the tokens have been transferred to a compatible recipient. Conversely, if the function reverts or returns any value other than `0xbc197c81`, the ERC1155 token standard mandates that the transaction must be reverted. This safeguard ensures that tokens are not transferred to contracts that do not recognize or cannot properly manage ERC1155 tokens, thus preventing potential loss or locking of tokens in incompatible contracts.",
            "type": "semantic_return",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": " throw if the function does not accept the transfer(s)",
            "type": "throw",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": " throw if return value is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`",
            "type": "throw",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "return 0xbc197c81 if it accepts the transfer(s)",
            "type": "return",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4)",
            "if": null
        },
        {
            "rule": "call onERC1155BatchReceived if at the end of a `safeBatchTransferFrom` after the balances have been updated",
            "type": "call",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4)",
            "if": null
        }
    ]
}