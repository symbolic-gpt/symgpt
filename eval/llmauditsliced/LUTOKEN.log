2025-08-17 19:43:31 - /home/szx5097/code/solgpt/py/audit/process.py:186 - INFO - check if name() returns(string) is in ['owner() returns(address)', 'upgradeAgent() returns(UpgradeAgent)', 'freeze() returns(bool)', 'symbol() returns(string)', 'sale() returns(address)', 'totalUpgraded() returns(uint256)', 'paused() returns(bool)', 'name() returns(string)', 'upgradeMaster() returns(address)', 'decimals() returns(uint8)', 'frozen() returns(bool)']: True
2025-08-17 19:43:31 - /home/szx5097/code/solgpt/py/audit/process.py:186 - INFO - check if symbol() returns(string) is in ['owner() returns(address)', 'upgradeAgent() returns(UpgradeAgent)', 'freeze() returns(bool)', 'symbol() returns(string)', 'sale() returns(address)', 'totalUpgraded() returns(uint256)', 'paused() returns(bool)', 'name() returns(string)', 'upgradeMaster() returns(address)', 'decimals() returns(uint8)', 'frozen() returns(bool)']: True
2025-08-17 19:43:31 - /home/szx5097/code/solgpt/py/audit/process.py:186 - INFO - check if decimals() returns(uint8) is in ['owner() returns(address)', 'upgradeAgent() returns(UpgradeAgent)', 'freeze() returns(bool)', 'symbol() returns(string)', 'sale() returns(address)', 'totalUpgraded() returns(uint256)', 'paused() returns(bool)', 'name() returns(string)', 'upgradeMaster() returns(address)', 'decimals() returns(uint8)', 'frozen() returns(bool)']: True
2025-08-17 19:43:31 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transfer(address _to, uint256 _value) public returns (bool success)] checking rule=' throw if the message caller's account balance does not have enough tokens to spend' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf', 'keys': [{'type': 'MsgSenderSelector'}]}, 'right': {'type': 'FuncParamSelector', 'index': 1}, 'op': 'lt'}, 'op': 'throw'}'
2025-08-17 19:43:31 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:43:42 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transfer(address _to, uint256 _value) public returns (bool success)] checking rule='not throw if Transfers of 0 values' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 1}, 'right': {'type': 'ConstantSelector', 'value': 0}, 'op': 'eq'}, 'op': 'not_throw'}'
2025-08-17 19:43:42 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:43:54 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transfer(address _to, uint256 _value) public returns (bool success)] checking rule='emit '['Transfer']' if transfer is called' sym='{'type': 'EmitVerify', 'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'transfer', 'keys': [{'type': 'FuncParamSelector', 'index': 0}]}}, 'within_call_fn': 'transfer'}'
2025-08-17 19:43:54 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:43:54 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)] checking rule=' throw if the _from account has not deliberately authorized the sender of the message via some mechanism' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'StateVarSelector', 'anchor_fn': 'allowance', 'keys': [{'type': 'FuncParamSelector', 'index': 0}, {'type': 'MsgSenderSelector'}]}, 'right': {'type': 'FuncParamSelector', 'index': 2}, 'op': 'lt'}, 'op': 'throw'}'
2025-08-17 19:43:54 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:44:07 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)] checking rule='not throw if Transfers of 0 values' sym='{'type': 'ThrowVerify', 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 2}, 'right': {'type': 'ConstantSelector', 'value': 0}, 'op': 'eq'}, 'op': 'not_throw'}'
2025-08-17 19:44:07 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:44:20 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)] checking rule='emit '['Transfer']' if Transfers _value amount of tokens from address _from to address _to' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}, 'change_type': 'increase'}, 'type': 'EmitVerify'}'
2025-08-17 19:44:20 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:44:31 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)] checking rule='emit '['Transfer']' if Transfers of 0 values' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'anchor_fn': 'balanceOf', 'type': 'StateVarSelector', 'keys': [{'type': 'FuncParamSelector', 'index': 1}]}}, 'cond': {'type': 'CompCondition', 'left': {'type': 'FuncParamSelector', 'index': 2}, 'right': {'type': 'ConstantSelector', 'value': 0}, 'op': 'eq'}, 'type': 'EmitVerify'}'
2025-08-17 19:44:31 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:44:47 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function approve(address _spender, uint256 _value) public returns (bool success)] checking rule='allowance is reset to _value' sym='{'type': 'StateAssignVerify', 'state': {'type': 'StateVarSelector', 'anchor_fn': 'approve', 'keys': ['msg.sender', {'type': 'FuncParamSelector', 'index': 0}]}, 'value': {'type': 'FuncParamSelector', 'index': 1}, 'op': 'overwrite'}'
2025-08-17 19:44:47 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=approve
2025-08-17 19:44:50 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=function approve(address _spender, uint256 _value) public returns (bool success)] checking rule='emit '['Approval']' if function successfully executes' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'allowance'}}, 'type': 'EmitVerify'}'
2025-08-17 19:44:50 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=approve
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 _value)] checking rule='emit 'Transfer'' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf'}}, 'type': 'EmitVerify'}'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=pause
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=unpause
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=renounceOwnership
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferOwnership
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=burn
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='burn(uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transfer(address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=upgrade
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='upgrade(uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setUpgradeAgent
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setUpgradeMaster
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transferFrom(address,address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=approve
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=increaseApproval
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=decreaseApproval
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=burn
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='burn(uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=constructor
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='constructor(string,string,uint8,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transfer(address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transferFrom(address,address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setSale
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setFreeze
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=thaw
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 _value)] checking rule='emit 'Transfer'' sym='{'type': 'EmitVerify', 'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf'}}}'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=pause
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=unpause
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=renounceOwnership
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferOwnership
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=burn
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='burn(uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transfer(address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=upgrade
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='upgrade(uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setUpgradeAgent
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setUpgradeMaster
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transferFrom(address,address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=approve
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=increaseApproval
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=decreaseApproval
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=burn
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='burn(uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=constructor
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='constructor(string,string,uint8,uint256) returns()': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transfer(address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:347 - ERROR - [sym] failed to verify rule='emit 'Transfer'' for function='transferFrom(address,address,uint256) returns(bool)': unsupported operand type(s) for +: 'NoneType' and 'str'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setSale
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setFreeze
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=thaw
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Transfer(address indexed _from, address indexed _to, uint256 _value)] checking rule='emit 'Transfer'' sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf'}, 'change_type': 'token_creation'}, 'arg_verifiers': [{'arg_index': 0, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': '0x0'}}, 'type': 'ArgVerify'}], 'type': 'EmitVerify'}'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:273 - ERROR - [sym] failed to deserialize sym='{'event': 'Transfer', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'balanceOf'}, 'change_type': 'token_creation'}, 'arg_verifiers': [{'arg_index': 0, 'expected_value': {'value': {'type': 'ConstantSelector', 'value': '0x0'}}, 'type': 'ArgVerify'}], 'type': 'EmitVerify'}': 'value'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/audit/process.py:269 - INFO - [sym][interface=event Approval(address indexed _owner, address indexed _spender, uint256 _value)] checking rule='emit 'Approval'' sym='{'event': 'Approval', 'sv_cond': {'type': 'WrittenCondition', 'value': {'type': 'StateVarSelector', 'anchor_fn': 'approve'}}, 'within_call_fn': 'approve', 'type': 'EmitVerify'}'
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=pause
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=unpause
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=renounceOwnership
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferOwnership
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=burn
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=upgrade
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setUpgradeAgent
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setUpgradeMaster
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=approve
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=increaseApproval
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=decreaseApproval
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=burn
2025-08-17 19:45:10 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=constructor
2025-08-17 19:45:11 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transfer
2025-08-17 19:45:11 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=transferFrom
2025-08-17 19:45:11 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setSale
2025-08-17 19:45:11 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=setFreeze
2025-08-17 19:45:11 - /home/szx5097/code/solgpt/py/sol/sym.py:831 - INFO - [sym] run contract=LutToken function=thaw
2025-08-17 19:45:11 - /home/szx5097/code/solgpt/py/audit/process.py:108 - INFO - [+] eval/llmauditsliced/LUTOKEN.json
